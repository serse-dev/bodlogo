"""
Streamlit app: Generate 10 similar physics/math problems using Google's Gemini

Setup:
  pip install streamlit google-generativeai pandas openpyxl python-docx

Run:
  export GOOGLE_API_KEY="your-key"   # or set in the app sidebar each run
  streamlit run app.py
"""

import os
import io
import re
import textwrap
from typing import Generator

import pandas as pd
import streamlit as st

try:
    import google.generativeai as genai
except Exception as e:
    genai = None

# ------------------------------
# Streamlit Page Config
# ------------------------------
st.set_page_config(
    page_title="–§–∏–∑–∏–∫/–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –ë–æ–¥–ª–æ–≥–æ “Æ“Ø—Å–≥—ç–≥—á (Gemini)",
    page_icon="üßÆ",
    layout="centered",
)

st.title("üßÆ –§–∏–∑–∏–∫/–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –ë–æ–¥–ª–æ–≥–æ “Æ“Ø—Å–≥—ç–≥—á ‚Äî Gemini")
st.caption(
    "Textarea –¥—ç—ç—Ä –æ—Ä—É—É–ª—Å–∞–Ω –±–æ–¥–ª–æ–≥–æ—Ç–æ–π —Ç”©—Å—Ç—ç–π **10** –±–æ–¥–ª–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä “Ø“Ø—Å–≥—ç–Ω—ç. "
    "Google Gemini-–≥ –∞—à–∏–≥–ª–∞–¥–∞–≥."
)

# ------------------------------
# Subject and subtopic definitions
# ------------------------------
PHYSICS_SUBTOPICS = {
    "–ú–µ—Ö–∞–Ω–∏–∫": ["–ö–∏–Ω–µ–º–∞—Ç–∏–∫", "–î–∏–Ω–∞–º–∏–∫", "–°—Ç–∞—Ç–∏–∫", "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏", "–•”©–¥”©–ª–≥”©”©–Ω–∏–π —Ö–∞–¥–≥–∞–ª–∞–ª—Ç—ã–Ω —Ö—É—É–ª—å", "–•“Ø—á–Ω–∏–π –º–æ–º–µ–Ω—Ç"],
    "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫": ["–•–∏–π–Ω —Ö—É—É–ª—å", "–î—É–ª–∞–∞–Ω –¥–∞–º–∂—É—É–ª–∞–ª—Ç", "–î—É–ª–∞–∞–Ω—ã –º–∞—à–∏–Ω", "–≠–Ω—Ç—Ä–æ–ø–∏", "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏–π–Ω —Ö—É—É–ª—å"],
    "–¶–∞—Ö–∏–ª–≥–∞–∞–Ω –±–∞ –°–æ—Ä–æ–Ω–∑": ["–¶–∞—Ö–∏–ª–≥–∞–∞–Ω –æ—Ä–æ–Ω", "–¶–∞—Ö–∏–ª–≥–∞–∞–Ω –≥“Ø–π–¥—ç–ª", "–°–æ—Ä–æ–Ω–∑–æ–Ω –æ—Ä–æ–Ω", "–¶–∞—Ö–∏–ª–≥–∞–∞–Ω —Å–æ—Ä–æ–Ω–∑–æ–Ω –∏–Ω–¥—É–∫—Ü", "RC –±–∞ RL —Ö—ç–ª—Ö—ç—ç"],
    "–î–æ–ª–≥–∏–æ–Ω –±–∞ –û–ø—Ç–∏–∫": ["–î–æ–ª–≥–∏–æ–Ω—ã —à–∏–Ω–∂ —á–∞–Ω–∞—Ä", "–ì—ç—Ä–ª–∏–π–Ω –æ–≥–∏–ª—Ç", "–ì—ç—Ä–ª–∏–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü", "–ì—ç—Ä–ª–∏–π–Ω —Ç—É—è–ª–∑—É—É—Ä", "–•–∞–∑–∞–π–ª—Ç"],
    "–û—Ä—á–∏–Ω “Ø–µ–∏–π–Ω —Ñ–∏–∑–∏–∫": ["–ö–≤–∞–Ω—Ç –º–µ—Ö–∞–Ω–∏–∫", "–•–∞—Ä—å—Ü–∞–Ω–≥—É–π –æ–Ω–æ–ª", "–ê—Ç–æ–º—ã–Ω —Ñ–∏–∑–∏–∫", "–¶”©–º–∏–π–Ω —Ñ–∏–∑–∏–∫", "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä –±”©”©–º—Å"]
}

MATH_SUBTOPICS = {
    "–ê–ª–≥–µ–±—Ä": ["–¢—ç–≥—à–∏—Ç–≥—ç–ª –±–æ–¥–æ—Ö", "–¢—ç–Ω—Ü—ç—Ç–≥—ç–ª –±–∏—à", "–û–ª–æ–Ω –≥–∏—à“Ø“Ø–Ω—Ç", "–ö–æ–º–ø–ª–µ–∫—Å —Ç–æ–æ", "–ú–∞—Ç—Ä–∏—Ü, —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–≥—á"],
    "–ì–µ–æ–º–µ—Ç—Ä": ["–ì—É—Ä–≤–∞–ª–∂–∏–Ω", "–î”©—Ä–≤”©–ª–∂–∏–Ω", "–¢–æ–π—Ä–æ–≥", "–ì–µ–æ–º–µ—Ç—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü", "–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä"],
    "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä": ["–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü", "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä —Ç—ç–≥—à–∏—Ç–≥—ç–ª", "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä —Ç—ç–Ω—Ü—ç—Ç–≥—ç–ª –±–∏—à", "–ò–Ω–≤–µ—Ä—Å —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü"],
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –∞–Ω–∞–ª–∏–∑": ["–£–ª–∞–º–∂–ª–∞–ª", "–ò–Ω—Ç–µ–≥—Ä–∞–ª", "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª —Ç—ç–≥—à–∏—Ç–≥—ç–ª", "–§—É–Ω–∫—Ü–∏–π–Ω —Å—É–¥–∞–ª–≥–∞–∞", "–†—è–¥"],
    "–ú–∞–≥–∞–¥–ª–∞–ª –±–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫": ["–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫", "–ú–∞–≥–∞–¥–ª–∞–ª—ã–Ω –æ–Ω–æ–ª", "–°–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π —Ö—ç–º–∂–∏–≥–¥—ç—Ö“Ø“Ø–Ω", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫ –¥“Ø–Ω –∞–Ω–∞–ª–∏–∑", "–†–µ–≥—Ä–µ—Å—Å–∏–π–Ω –∞–Ω–∞–ª–∏–∑"]
}

# ------------------------------
# Sidebar: API Key & Settings
# ------------------------------
with st.sidebar:
    st.header("–¢–æ—Ö–∏—Ä–≥–æ–æ")

    existing_key = os.getenv("GOOGLE_API_KEY", "")
    api_key = st.text_input(
        "Google API Key",
        type="password",
        value=existing_key,
        help=(
            "–°–∏—Å—Ç–µ–º–∏–π–Ω –æ—Ä—á–∏–Ω–¥ —Ç“Ø–ª—Ö“Ø“Ø—Ä —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–æ–ª —ç–Ω–¥ —Ç“Ø—Ä –∑—É—É—Ä –æ—Ä—É—É–ª–∂ –±–æ–ª–Ω–æ. "
            "–≠–Ω—ç —Ç“Ø–ª—Ö“Ø“Ø—Ä –∑”©–≤—Ö”©–Ω –ª–æ–∫–∞–ª –¥—ç—ç—Ä —Ç–∞–Ω—å –∞—à–∏–≥–ª–∞–≥–¥–∞–Ω–∞."
        ),
    )

    # Subject selection
    subject = st.selectbox(
        "–•–∏—á—ç—ç–ª",
        ["–§–∏–∑–∏–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫"],
        index=0,
        help="–ë–æ–¥–ª–æ–≥–æ “Ø“Ø—Å–≥—ç—Ö —Ö–∏—á—ç—ç–ª—ç—ç —Å–æ–Ω–≥–æ–Ω–æ —É—É"
    )
    
    # Subtopic selection based on subject
    if subject == "–§–∏–∑–∏–∫":
        main_topic = st.selectbox(
            "–ì–æ–ª —Å—ç–¥—ç–≤",
            list(PHYSICS_SUBTOPICS.keys()),
            index=0
        )
        subtopic = st.selectbox(
            "–î—ç–¥ —Å—ç–¥—ç–≤",
            PHYSICS_SUBTOPICS[main_topic],
            index=0
        )
    else:  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫
        main_topic = st.selectbox(
            "–ì–æ–ª —Å—ç–¥—ç–≤",
            list(MATH_SUBTOPICS.keys()),
            index=0
        )
        subtopic = st.selectbox(
            "–î—ç–¥ —Å—ç–¥—ç–≤",
            MATH_SUBTOPICS[main_topic],
            index=0
        )

    model_name = st.selectbox(
        "Gemini –∑–∞–≥–≤–∞—Ä",
        [
            "gemini-1.5-flash",
            "gemini-1.5-pro",
        ],
        index=0,
        help=(
            "flash –Ω—å —Ö—É—Ä–¥–∞–Ω –±”©–≥”©”©–¥ –±–∞–≥–∞ ”©—Ä—Ç”©–≥—Ç—ç–π, pro –Ω—å –∏–ª“Ø“Ø —á–∞–¥–≤–∞—Ä—Ç–∞–π –±–æ–ª–æ–≤—á —É–¥–∞–∞–Ω/“Ø–Ω—ç—Ç—ç–π –±–∞–π–∂ –±–æ–ª–Ω–æ."
        ),
    )

    temperature = st.slider(
        "–°–∞–Ω–∞–∞—á–∏–ª–≥–∞—Ç–∞–π –±–∞–π–¥–∞–ª (temperature)", 0.0, 1.0, 0.7, 0.05,
        help="–ò—Ö—Å—ç—Ö —Ç—É—Å–∞–º —Ç”©—Ä”©–ª–∂–∏–ª—Ç –Ω—ç–º—ç–≥–¥—ç–Ω—ç."
    )

    include_solutions = st.checkbox(
        "–®–∏–π–¥ (—Ç–∞–π–ª–±–∞—Ä)-–∏–π–≥ —Ö–∞–º—Ç–∞–¥ –Ω—å –≥–∞—Ä–≥–∞—Ö", value=False
    )

    st.markdown("---")
    st.subheader("–ñ–∏—à—ç—ç –±–æ–¥–ª–æ–≥–æ")
    
    # Example problems based on subject and subtopic
    if subject == "–§–∏–∑–∏–∫":
        if main_topic == "–ú–µ—Ö–∞–Ω–∏–∫":
            if subtopic == "–ö–∏–Ω–µ–º–∞—Ç–∏–∫":
                example_problem = "–ú–∞—à–∏–Ω 72 –∫–º/—Ü —Ö—É—Ä–¥—Ç–∞–π —è–≤–∂ –±–∞–π–≥–∞–∞–¥ 4 —Å–µ–∫—É–Ω–¥—ã–Ω –¥–æ—Ç–æ—Ä –∑–æ–≥—Å—Å–æ–Ω. –ú–∞—à–∏–Ω—ã —Ö—É—Ä–¥–∞—Ç–≥–∞–ª –±–æ–ª–æ–Ω –∑–æ–≥—Å–æ—Ö –∑–∞–º –Ω—å —Ö—ç–¥ –≤—ç?"
            elif subtopic == "–î–∏–Ω–∞–º–∏–∫":
                example_problem = "15¬∞ –Ω–∞–ª—É—É —Ö–∞–≤—Ç–≥–∞–π –¥—ç—ç—Ä 2 –∫–≥ –º–∞—Å—Å—Ç–∞–π –±–∏–µ—Ç–∏–π–≥ “Ø—Ä—ç–ª—Ç–≥“Ø–π –æ—Ä—á–∏–Ω–¥ —á–∏—Ä—ç—Ö—ç–¥ –±–∏–µ–¥ “Ø–π–ª—á–ª—ç—Ö —Ç–∞—Ç–∞—Ö —Ö“Ø—á –±–æ–ª–æ–Ω –Ω–∞–ª—É—É–≥–∏–π–Ω –¥–∞–≥—É—É—Ö —Ö—É—Ä–¥–∞—Ç–≥–∞–ª—ã–≥ –æ–ª. g=9.8 –º/—Å¬≤."
            else:
                example_problem = "5 –∫–≥ –º–∞—Å—Å—Ç–∞–π –±–∏–µ 10 –º/—Å —Ö—É—Ä–¥—Ç–∞–π–≥–∞–∞—Ä —Ö”©–¥”©–ª–∂ –±–∞–π–≥–∞–∞–¥ 2 –∫–≥ –º–∞—Å—Å—Ç–∞–π —Ç–∞–π–≤–∞–Ω –±–∞–π–≥–∞–∞ –±–∏–µ—Ç—ç–π –º”©—Ä–≥”©–ª–¥”©–≤. –ú”©—Ä–≥”©–ª–¥”©”©–Ω —É—è–Ω —Ö–∞—Ç–∞–Ω –±–æ–ª —É–≥—Å–∞—Ä—Å–∞–Ω –±–∏–µ–∏–π–Ω —Ö—É—Ä–¥—ã–≥ –æ–ª."
        elif main_topic == "–¶–∞—Ö–∏–ª–≥–∞–∞–Ω –±–∞ –°–æ—Ä–æ–Ω–∑":
            example_problem = "10 Œ© —ç—Å—ç—Ä–≥“Ø“Ø—Ü—ç–ª—Ç—ç–π –¥–∞–º–∂—É—É–ª–∞–≥—á–∏–¥ 12 –í —Ö“Ø—á–¥—ç–ª –∑–∞–ª–≥–∞—Ö–∞–¥ –≥“Ø–π–¥—ç–ª —Ö—ç–¥ –≤—ç? –î–∞–º–∂—É—É–ª–∞–≥—á–∞–∞—Ä 5 –º–∏–Ω—É—Ç —è–≤–∞—Ö–∞–¥ —è–ª–≥–∞—Ä–∞—Ö –¥—É–ª–∞–∞–Ω—ã —Ö—ç–º–∂—ç—ç–≥ –æ–ª."
        else:
            example_problem = "100 –≥ –º–∞—Å—Å—Ç–∞–π –±–∏–µ–∏–π–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä 20¬∞C-–∞–∞—Å 80¬∞C —Ö“Ø—Ä—Ç—ç–ª —Ö–∞–ª–∞–∞—Ö–∞–¥ —à–∞–∞—Ä–¥–∞–≥–¥–∞—Ö –¥—É–ª–∞–∞–Ω—ã —Ö—ç–º–∂—ç—ç–≥ –æ–ª. –ë–∏–µ–∏–π–Ω —Ö—É–≤–∏–π–Ω –¥—É–ª–∞–∞–Ω –±–∞–≥—Ç–∞–∞–º–∂ 0.5 J/g¬∞C –±–∞–π–Ω–∞."
    else:  # –ú–∞—Ç–µ–º–∞—Ç–∏–∫
        if main_topic == "–ê–ª–≥–µ–±—Ä":
            example_problem = "x¬≤ - 5x + 6 = 0 —Ç—ç–≥—à–∏—Ç–≥—ç–ª–∏–π–Ω –±–æ–¥–∏—Ç —à–∏–π–¥–∏–π–≥ –æ–ª. –ú”©–Ω —è–∑–≥—É—É—Ä—É—É–¥—ã–Ω –Ω–∏–π–ª–±—ç—Ä –±–∞ “Ø—Ä–∂–≤—ç—Ä–∏–π–≥ –æ–ª."
        elif main_topic == "–ì–µ–æ–º–µ—Ç—Ä":
            example_problem = "–ì—É—Ä–≤–∞–ª–∂–Ω—ã —Ç–∞–ª—É—É–¥ –Ω—å 6 —Å–º, 8 —Å–º, 10 —Å–º –±–∞–π–Ω–∞. –≠–Ω—ç –≥—É—Ä–≤–∞–ª–∂–∏–Ω —Ç—ç–≥—à ”©–Ω—Ü”©–≥—Ç —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∞–¥, —Ç–∞–ª–±–∞–π–≥ –Ω—å –æ–ª."
        elif main_topic == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –∞–Ω–∞–ª–∏–∑":
            example_problem = "y = 2x¬≤ - 4x + 1 —Ñ—É–Ω–∫—Ü–∏–π–Ω —É–ª–∞–º–∂–ª–∞–ª—ã–≥ –æ–ª–∂, —ç–∫—Å—Ç—Ä–µ–º—É–º —Ü—ç–≥“Ø“Ø–¥–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª."
        else:
            example_problem = "–ù—ç–≥ —à–æ–æ —à–∏–¥—ç—Ö—ç–¥: a) 4-”©”©—Å –∏—Ö —Ç–æ–æ –±—É—É—Ö –º–∞–≥–∞–¥–ª–∞–ª, b) —Ç—ç–≥—à —Ç–æ–æ –±—É—É—Ö –º–∞–≥–∞–¥–ª–∞–ª—ã–≥ –æ–ª."
    
    if st.button("–ñ–∏—à—ç—ç–≥—ç—ç—Ä –¥“Ø“Ø—Ä–≥—ç—Ö"):
        st.session_state["problem_text"] = example_problem

# ------------------------------
# Main Input
# ------------------------------
problem_text = st.text_area(
    f"{subject} –±–æ–¥–ª–æ–≥—ã–Ω –∂–∏—à—ç—ç –æ—Ä—É—É–ª–∞—Ö ({main_topic} - {subtopic})",
    key="problem_text",
    height=180,
    placeholder=example_problem,
)

st.info(
    "–î–æ–æ—Ä—Ö —Ç–æ–≤—á–∏–π–≥ –¥–∞—Ä–º–∞–≥—Ü, –æ—Ä—É—É–ª—Å–∞–Ω –±–æ–¥–ª–æ–≥–æ—Ç–æ–π —Ç”©—Å—Ç—ç–π **—è–≥ 10** –±–æ–¥–ª–æ–≥—ã–≥ “Ø“Ø—Å–≥—ç–∂, "
    "–º–∞—Ä–∫–¥–∞—É–Ω —Ö—ç–ª–±—ç—Ä—ç—ç—Ä —à—É—É–¥ —Ö–∞—Ä–∞–≥–¥—É—É–ª–Ω–∞."
)

# ------------------------------
# Helpers
# ------------------------------
SYSTEM_HINT = """
–¢–∞ –±–æ–ª {subject} –±–∞–≥—à.
–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–≥—Å”©–Ω –±–æ–¥–ª–æ–≥—ã–Ω –∞–≥—É—É–ª–≥–∞, —Å—ç–¥—ç–≤, —Ç“Ø–≤—à–∏–Ω–¥ —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω —Ç”©—Å—Ç—ç–π —à–∏–Ω—ç –±–æ–¥–ª–æ–≥—É—É–¥ –∑–æ—Ö–∏–æ–Ω–æ.
–ë–æ–¥–ª–æ–≥—É—É–¥ –Ω—å –º—ç–¥—ç—ç–ª–ª–∏–π–Ω —Ö—É–≤—å–¥ –ª–æ–≥–∏–∫, —Ö—ç–º–∂–∏–≥–¥—ç—Ö“Ø“Ø–Ω“Ø“Ø–¥ –Ω—å –±–æ–¥–æ–≥–¥–æ—Ö–æ–æ—Ä,
–±–∞–≥–∞ –∑—ç—Ä—ç–≥ —Ö—É–≤—å—Å–∞–Ω ”©”©—Ä—á–ª”©–≥–¥—Å”©–Ω (—Ç–æ–æ –±–∞ –Ω”©—Ö—Ü”©–ª) –±–∞–π—Ö —ë—Å—Ç–æ–π.
""".strip()

def build_prompt(user_problem: str, n: int = 10, with_solutions: bool = False) -> str:
    subject_hint = SYSTEM_HINT.format(subject=subject)
    
    base = f"""
{subject_hint}

–°–≠–î–≠–í: {main_topic} - {subtopic}

–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–≥—Å”©–Ω –±–æ–¥–ª–æ–≥–æ:\n\n{user_problem}\n\n
“Æ“Æ–°–ì–≠–• –î–ê–ê–õ–ì–ê–í–ê–†:
- –î—ç—ç—Ä—Ö –±–æ–¥–ª–æ–≥–æ—Ç–æ–π –∏–∂–∏–ª —Å—ç–¥—ç–≤ ({main_topic} - {subtopic}), –Ω—ç–≥ —Ç“Ø–≤—à–Ω–∏–π **{n}** —à–∏–Ω—ç –±–æ–¥–ª–æ–≥–æ –∑–æ—Ö–∏–æ–Ω–æ.
- –•—ç–º–∂–∏–≥–¥—ç—Ö“Ø“Ø–Ω, –Ω”©—Ö—Ü”©–ª–∏–π–≥ ”©”©—Ä—á–∏–ª–∂ —Ç”©—Ä”©–ª–∂“Ø“Ø–ª.
- –ë–æ–¥–ª–æ–≥–æ –±“Ø—Ä: 1-2 –¥–æ–≥–æ–ª –º”©—Ä, –æ–π–ª–≥–æ–º–∂—Ç–æ–π, –Ω—ç–≥ —É—Ç–≥–∞—Ç–∞–π –±–∞–π–≥.
- {subject} —Ö–∏—á—ç—ç–ª–∏–π–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç –Ω—ç–≥–∂, —Ç—ç–º–¥—ç–≥–ª—ç–≥—ç—ç–≥ –∞—à–∏–≥–ª–∞.
- –î–∞–≤—Ö–∞—Ä–¥—Å–∞–Ω –Ω”©—Ö—Ü”©–ª, —Ç–æ–æ –±“Ø“Ø –∞—à–∏–≥–ª–∞.
""".strip()

    if with_solutions:
        base += "\n- –ë“Æ–† –ë–û–î–õ–û–ì–û–î –±–æ–¥–æ–ª—Ç—ã–Ω “Ø–Ω–¥—Å—ç–Ω –∞–ª—Ö–∞–º/—Ö–∞—Ä–∏—É–≥ –±–æ–≥–∏–Ω–æ —Ç–∞–π–ª–±–∞—Ä—Ç–∞–π —Ö–∞–º—Ç –æ—Ä—É—É–ª."

    base += textwrap.dedent(
        f"""
\n\n–ì–ê–†–ì–ê–õ–¢–´–ù –•–≠–õ–ë–≠–†:
- –ú–∞—Ä–∫–¥–∞—É–Ω –∂–∞–≥—Å–∞–∞–ª—Ç —Ö—ç–ª–±—ç—Ä—ç—ç—Ä.
- –ë–æ–¥–ª–æ–≥–æ –±“Ø—Ä–∏–π–≥ –¥—É–≥–∞–∞—Ä–ª–∞–∂, –¥–∞—Ä–∞–∞—Ö –º–∞—è–≥–∞–∞—Ä –±–∏—á:\n
{{n}}. **–ë–æ–¥–ª–æ–≥–æ:** ...\n   **–°—ç–¥—ç–≤:** {main_topic} - {subtopic}\n"""
    )

    if with_solutions:
        base += "   **–¢–∞–π–ª–±–∞—Ä/–®–∏–π–¥:** ...\n"

    base += "\n–ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä –±–∏—á."
    return base


def stream_gemini_text(prompt: str, model_name: str, temperature: float) -> Generator[str, None, None]:
    """Yield plain text chunks from a streaming Gemini response."""
    global genai
    if genai is None:
        yield "‚ö†Ô∏è google-generativeai —Å–∞–Ω —Å—É—É—Å–∞–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É: `pip install google-generativeai`\n"
        return

    key = os.getenv("GOOGLE_API_KEY") or api_key
    if not key:
        yield "‚ö†Ô∏è API —Ç“Ø–ª—Ö“Ø“Ø—Ä –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞. Sidebar-–∞–∞—Å GOOGLE_API_KEY –æ—Ä—É—É–ª–Ω–∞ —É—É.\n"
        return

    genai.configure(api_key=key)

    generation_config = {
        "temperature": float(temperature),
        "max_output_tokens": 4096,
    }

    model = genai.GenerativeModel(model_name)
    try:
        response = model.generate_content(
            prompt,
            stream=True,
            generation_config=generation_config,
        )
        collected = []
        for chunk in response:
            if getattr(chunk, "text", None):
                collected.append(chunk.text)
                yield chunk.text
        st.session_state["last_generated"] = "".join(collected)
    except Exception as e:
        yield f"\n\n‚ùå –ê–ª–¥–∞–∞: {e}"


# ------------------------------
# Action Button
# ------------------------------
col1, col2 = st.columns([1, 2])
with col1:
    generate = st.button("ü™Ñ 10 –±–æ–¥–ª–æ–≥–æ “Ø“Ø—Å–≥—ç—Ö", type="primary", use_container_width=True)
with col2:
    clear = st.button("üßπ –ê—Ä–∏–ª–≥–∞—Ö", use_container_width=True)

if clear:
    st.session_state["problem_text"] = ""
    st.session_state["last_generated"] = ""

if api_key:
    os.environ["GOOGLE_API_KEY"] = api_key

# ------------------------------
# Generation
# ------------------------------
if generate:
    if not problem_text or problem_text.strip() == "":
        st.warning("–≠—Ö –±–æ–¥–ª–æ–≥–æ–æ —ç—Ö–ª—ç—ç–¥ –±–∏—á–Ω—ç “Ø“Ø.")
    else:
        st.subheader(f"“Æ“Ø—Å–≥—ç—Å—ç–Ω {subject} –±–æ–¥–ª–æ–≥—É—É–¥ ({main_topic} - {subtopic})")
        prompt = build_prompt(problem_text, n=10, with_solutions=include_solutions)
        st.write_stream(
            stream_gemini_text(prompt, model_name=model_name, temperature=temperature)
        )

# ------------------------------
# Download buttons (DOCX only, no topic header; only numbered problems)
# ------------------------------
if "last_generated" in st.session_state and st.session_state["last_generated"]:
    text = st.session_state["last_generated"]

    # Parse ONLY the problem statements from the markdown output.
    # We ignore lines like "**–°—ç–¥—ç–≤:** ..." and "**–¢–∞–π–ª–±–∞—Ä/–®–∏–π–¥:** ...".
    problems: list[str] = []
    for raw in text.splitlines():
        line = raw.strip()
        if not line:
            continue
        # Capture lines that contain the problem marker
        if "**–ë–æ–¥–ª–æ–≥–æ:**" in line:
            # Remove leading numbering like "1. " if present, then split after marker
            line_no_num = re.sub(r"^\d+\.\s*", "", line)
            after_marker = line_no_num.split("**–ë–æ–¥–ª–æ–≥–æ:**", 1)[1].strip()
            # Remove leading punctuation like ':' just in case
            after_marker = after_marker.lstrip(":-‚Äì‚Äî ").strip()
            if after_marker:
                problems.append(after_marker)
            continue
        # Fallback: plain numbered line without bold markers
        if re.match(r"^\d+\.\s+", line) and "**" not in line and not line.lower().startswith("—Å—ç–¥—ç–≤"):
            problems.append(re.sub(r"^\d+\.\s+", "", line).strip())

    # If parsing found nothing (LLM deviated), fall back to non-empty lines that look like bullets
    if not problems:
        for raw in text.splitlines():
            line = raw.strip(" -*\t")
            if not line or line.lower().startswith("—Å—ç–¥—ç–≤") or line.lower().startswith("—Ç–∞–π–ª–±–∞—Ä"):
                continue
            problems.append(line)

    # Create DOCX with ONLY numbered problems, NO header/title.
    from docx import Document

    doc = Document()
    for i, prob in enumerate(problems, start=1):
        doc.add_paragraph(f"{i}. {prob}")

    doc_buffer = io.BytesIO()
    doc.save(doc_buffer)
    doc_buffer.seek(0)

    st.download_button(
        label="‚¨áÔ∏è DOCX —Ç–∞—Ç–∞—Ö",
        data=doc_buffer,
        file_name="problems.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    )

# ------------------------------
# Footer / Tips
# ------------------------------
st.markdown(
    """
---
**–ó”©–≤–ª”©–º–∂“Ø“Ø–¥**
- –û—Ä—É—É–ª–∞—Ö –±–æ–¥–ª–æ–≥–æ–æ —Ç–æ–¥–æ—Ä—Ö–æ–π, –±“Ø—Ä—ç–Ω ”©–≥”©–≥—Ç—ç–π –±–∏—á–∏—Ö —Ç—É—Å–∞–º —á–∞–Ω–∞—Ä—Ç–∞–π –≥–∞—Ä–∞–ª—Ç –≥–∞—Ä–Ω–∞.
- –¢”©—Å—Ç—ç–π –±–∏—à –±–æ–ª temperature-–≥ –±–∞–≥–∞—Å–≥–∞–∂ (0.3‚Äì0.6) —Ç—É—Ä—à–∞–∞–¥ “Ø–∑—ç—ç—Ä—ç–π.
- –®–∏–π–¥ —Ö—ç—Ä—ç–≥—Ç—ç–π –±–æ–ª "–®–∏–π–¥–∏–π–≥ —Ö–∞–º—Ç–∞–¥ –Ω—å –≥–∞—Ä–≥–∞—Ö" —Å–æ–Ω–≥–æ–ª—Ç—ã–≥ –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—ç—Ä—ç–π.
"""
)
